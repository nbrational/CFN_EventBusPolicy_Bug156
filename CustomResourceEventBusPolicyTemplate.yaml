Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - events:*
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: arn:aws:iam::*:role/AWS_Events_Invoke_Targets
  CreateEventBusPolicyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Code:
        S3Bucket: mylambdacodebucket123
        S3Key: function.zip
  CustomEventBusPolicy:
    Type: Custom::CustomEventBusPolicy
    Properties:
      ServiceToken: !GetAtt CreateEventBusPolicyLambda.Arn
      Region: !Ref "AWS::Region"
      EventBusName: ''
      Action: events:PutEvents
      Principal: '*'
      StatementId: CM2PatchStatement
      TheCondition:
        Type: 'StringEquals'
        Key: 'aws:PrincipalOrgID'
        Value: 'o-6fmn73yz43'
